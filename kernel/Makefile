#
# Makefile for MARS
#

KBUILD_CFLAGS += -fdelete-null-pointer-checks

mars-objs :=				\
	lamport.o			\
	brick_say.o			\
	brick_mem.o			\
	brick.o				\
	mars_generic.o			\
	lib_log.o			\
	lib_rank.o			\
	lib_limiter.o			\
	lib_timing.o			\
	lib_mapfree.o			\
	mars_net.o			\
	mars_server.o			\
	mars_client.o			\
	mars_aio.o			\
	mars_bio.o			\
	mars_if.o			\
	mars_copy.o			\
	mars_trans_logger.o		\
	sy_old/sy_generic.o		\
	sy_old/sy_net.o			\
	sy_old/mars_proc.o		\
	sy_old/mars_light.o

obj-$(CONFIG_MARS)	+= mars.o

ifdef CONFIG_MARS_DEBUG

KBUILD_CFLAGS += -fno-inline-functions -fno-inline-small-functions -fno-inline-functions-called-once

# This is currently not really used.
# We urge people to maintain it by including it in debug versions
# (so the compiler may throw any complaints)

mars-objs += 				\
	mars_sio.o			\
	mars_dummy.o			\
	mars_check.o			\
	mars_buf.o			\
	mars_usebuf.o			\

endif

#
# buildtag.h should be regenerated in every build. If a file
# 'DISTVERSION' exists (out-of-tree tarball), its content is
# used as the BUILDTAG. Otherwise, if git is available, the
# git HEAD revision is used instead.
#
extra-y	+= buildtag.h
$(obj)/buildtag.h: $(patsubst $(obj)/buildtag.h,,$(wildcard $(obj)/*.[ch])) $(obj)/*/*.[ch]
	$(Q)$(kecho) "MARS: Generating $@"
	$(Q)set -e; \
	exec > $@;\
	/bin/echo -e "/* Automatically generated -- DO NOT EDIT! */";\
	cd $(src); \
	if [ -e DISTVERSION ]; then \
		BUILDTAG=$$(cat DISTVERSION); \
	elif git rev-parse --git-dir >/dev/null 2>&1; then \
		BUILDTAG="$$(git rev-parse HEAD)"; \
	else \
		BUILDTAG="no-buildtag-available"; \
	fi; \
	/bin/echo -e "#define BUILDTAG  \"$$BUILDTAG\"";\
	/bin/echo -e "#define BUILDHOST \"$$USER@$$HOSTNAME\"";\
	/bin/echo -e "#define BUILDDATE \"$$(date '+%F %T')\""

ifndef CONFIG_MARS
# mars_config.h is generated by a simple Kconfig parser (gen_config.pl)
# at build time.
# It does not respect any Kconfig dependencies.
# Therefore, it is unsafe. Use at your own risk!
# It is ONLY used for out-of-tree builds.
#
extra-y	+= mars_config.h
GEN_CONFIG_SCRIPT := $(src)/../scripts/gen_config.pl
$(obj)/mars_config.h: $(src)/Kconfig $(GEN_CONFIG_SCRIPT)
	$(Q)$(kecho) "MARS: Generating $@"
	$(Q)set -e; \
	if [ ! -x $(GEN_CONFIG_SCRIPT) ]; then \
	    $(kecho) "MARS: cannot execute script $(GEN_CONFIG_SCRIPT)"; \
	    /bin/false; \
	fi; \
	cat $< | $(GEN_CONFIG_SCRIPT) > $@;
endif
